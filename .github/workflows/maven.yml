name: Microservices CI/CD Pipeline

on:
  push:
    branches:
      - main
      - api-gateway
      - question-service
      - quiz-service
      - service-registry
  pull_request:
    branches:
      - main

jobs:
  service-registry-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build service-registry
        run: |
          cd service-registry
          chmod +x mvnw 
          ./mvnw clean install

  postgres-setup:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 0000  # Correct password
          POSTGRES_DB: questiondb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ./db-init:/docker-entrypoint-initdb.d
    steps:
      - name: Wait for PostgreSQL to be ready
        run: |
          docker ps  # List running containers to confirm PostgreSQL is up
          until pg_isready -h localhost -U postgres; do
            echo "Waiting for PostgreSQL to be ready...";
            sleep 3;
          done
        env:
          PGPASSWORD: 0000  # Correct password

      - name: Verify Database Creation
        run: |
          echo "Checking if databases 'questiondb' and 'quizdb' are created..."
          PGPASSWORD=0000 psql -h localhost -U postgres -tc "SELECT datname FROM pg_database WHERE datname IN ('questiondb', 'quizdb');"
        env:
          PGPASSWORD: 0000  # Correct password



  question-service-build:
    runs-on: ubuntu-latest
    needs: [service-registry-build, postgres-setup]  # Ensure both service-registry and postgres are ready
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Wait for PostgreSQL to be ready
        run: |
            echo "Waiting for PostgreSQL to be ready..."
            for i in {1..10}; do
              pg_isready -h localhost -U postgres && break || sleep 5;
              echo "PostgreSQL is not ready, retrying...";
            done
        env:
          PGPASSWORD: 0000

      - name: Build question-service
        run: |
          cd question-service
          chmod +x mvnw
          ./mvnw clean install
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/questiondb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: 0000

  quiz-service-build:
    runs-on: ubuntu-latest
    needs: [question-service-build]  # Ensure question-service completes first
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build quiz-service
        run: |
          cd quiz-service
          chmod +x mvnw
          ./mvnw clean install
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/quizdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: 0000

  api-gateway-build:
    runs-on: ubuntu-latest
    needs: quiz-service-build  # Ensure quiz-service completes first
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build api-gateway
        run: |
          cd api-gateway
          chmod +x mvnw
          ./mvnw clean install
